// Top-level build file where you can add configuration options common to all sub-projects/modules.
// Top-level build file where you can add configuration options common to all sub-projects/modules.

buildscript {
    repositories {
        jcenter()
        google()
    }
    dependencies {

        classpath 'com.android.tools.build:gradle:4.1.1'

        // NOTE: Do not place your application dependencies here; they belong
        // in the individual module build.gradle files
    }
}

allprojects {
    repositories {
        maven { url "https://maven.google.com" }
        jcenter()
        maven { url 'https://jitpack.io' }
        mavenCentral()
    }

    // Global variables common to all modules
    // see: http://tools.android.com/tech-docs/new-build-system/tips
    //
    ext {
        rtCompileSdkVersion=26          //Integer
        rtBuildToolsVersion="26.0.1"    //String

        rtMinSdkVersion=19

        // Note that using target version 22 bypasses the new run-time permissions found
        // in Marshmallow 23
        //
        rtTargetSdkVersion=22

        rtVersionCode=1

        // Semantic versioning description:
        // <Milestone release> <Feature Release> <Patch release> <Asset Compatibility INDEX>

        def versionPropsFile = file('version.properties')

        if (versionPropsFile.canRead()) {
            def Properties versionProps = new Properties()

            versionProps.load(new FileInputStream(versionPropsFile))

            def milestone_release = versionProps['MILESTONE_RELEASE']
            def feature_release = versionProps['FEATURE_RELEASE']
            def patch_release = versionProps['PATCH_RELEASE'].toInteger() + 1
            def asset_compatibility_index = versionProps['ASSET_COMPATIBILITY_INDEX']

            versionProps['PATCH_RELEASE']=patch_release.toString()
            versionProps.store(versionPropsFile.newWriter(), null)

            rtVersionName = milestone_release + '.' + feature_release + '.' + patch_release.toString() + '.' + asset_compatibility_index  //TODO: move this out of build so we don't have to rebuild to unzip assets
        }
        else {
            throw new GradleException("Could not read version.properties!")
        }




    }
}

task clean(type: Delete) {
    delete rootProject.buildDir
}
